# Function to calculate bias grouped by season
bias_function <- function(df, cols) {
map_dfr(cols, function(pair) {
col1 <- pair[1]
col2 <- pair[2]
if (col1 %in% names(df) && col2 %in% names(df) && "season" %in% names(df)) {
# Filter out rows with NA in either col1 or col2
valid_rows <- df %>%
filter(!is.na(!!sym(col1)), !is.na(!!sym(col2)))
# Calculate bias grouped by season
bias_results <- valid_rows %>%
group_by(season) %>%
summarise(
bias = round(mean((!!sym(col2) - !!sym(col1)), na.rm = TRUE), 2) # round to 2 decimal places
) %>%
mutate(variable = season)  # Add a label for the variable pair
return(bias_results)
} else {
# Return NA if columns are missing or no season column
data.frame(season = NA, bias = NA, variable = paste(col1, "vs", col2))
}
})
}
# Apply the function to each data frame in combined_list
bias_results_list <- map_dfr(names(combined_list), function(name) {
df <- combined_list[[name]]
bias_results <- bias_function(df, cols_to_analyze)
bias_results %>%
mutate(station = name)  # Add station name to results
})
# Reshape the results into a wide format, with one row per station and columns for each season and variable
wide_bias_results <- bias_results_list %>%
pivot_wider(
names_from = season,
values_from = bias
)
# Save the resulting bias_results DataFrame as a CSV file
write.csv(bias_results, "bias_results.csv", row.names = FALSE)
# Function to calculate bias grouped by season
bias_function <- function(df, cols) {
map_dfr(cols, function(pair) {
col1 <- pair[1]
col2 <- pair[2]
if (col1 %in% names(df) && col2 %in% names(df) && "season" %in% names(df)) {
# Filter out rows with NA in either col1 or col2
valid_rows <- df %>%
filter(!is.na(!!sym(col1)), !is.na(!!sym(col2)))
# Calculate bias grouped by season
bias_results <- valid_rows %>%
group_by(season) %>%
summarise(
bias = round(mean((!!sym(col2) - !!sym(col1)), na.rm = TRUE), 2) # round to 2 decimal places
)
return(bias_results)
} else {
# Return NA if columns are missing or no season column
data.frame(season = NA, bias = NA, variable = paste(col1, "vs", col2))
}
})
}
# Apply the function to each data frame in combined_list
bias_results_list <- map_dfr(names(combined_list), function(name) {
df <- combined_list[[name]]
bias_results <- bias_function(df, cols_to_analyze)
bias_results %>%
mutate(station = name)  # Add station name to results
})
# Reshape the results into a wide format, with one row per station and columns for each season and variable
wide_bias_results <- bias_results_list %>%
pivot_wider(
names_from = season,
values_from = bias
)
# Function to calculate bias grouped by season
bias_function <- function(df, cols) {
map_dfr(cols, function(pair) {
col1 <- pair[1]
col2 <- pair[2]
if (col1 %in% names(df) && col2 %in% names(df) && "season" %in% names(df)) {
# Filter out rows with NA in either col1 or col2
valid_rows <- df %>%
filter(!is.na(!!sym(col1)), !is.na(!!sym(col2)))
# Calculate bias grouped by season
bias_results <- valid_rows %>%
group_by(season) %>%
summarise(
bias = round(mean((!!sym(col2) - !!sym(col1)), na.rm = TRUE), 2) # round to 2 decimal places
)
return(bias_results)
} else {
# Return NA if columns are missing or no season column
data.frame(season = NA, bias = NA, variable = paste(col1, "vs", col2))
}
})
}
# Apply the function to each data frame in combined_list
bias_results_list <- map_dfr(names(combined_list), function(name) {
df <- combined_list[[name]]
bias_results <- bias_function(df, cols_to_analyze)
bias_results %>%
mutate(station = name)  # Add station name to results
})
# Reshape the results into a wide format, with one row per station and columns for each season and variable
bias_results <- bias_results_list %>%
pivot_wider(
names_from = season,
values_from = bias
)
# Save the resulting bias_results DataFrame as a CSV file
write.csv(bias_results, "bias_results.csv", row.names = FALSE)
# Transform data into a long format for ggplot
long_bias_results <- wide_bias_results %>%
pivot_longer(
cols = -station,  # Convert all columns except 'station'
names_to = "season",
values_to = "bias"
)
# Plot the heatmap
ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile(color = "white") +  # Use white borders for clarity
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,
name = "Bias") +
theme_minimal() +
labs(title = "Bias Heat Map by Season and Station",
x = "Season", y = "Station") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot the heatmap
ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile(color = "white") +  # Use white borders for clarity
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 3) +  # Display values with 2 decimal places
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,
name = "Bias") +
theme_minimal() +
labs(title = "Bias Heat Map by Season and Station",
x = "Season", y = "Station") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot the heatmap
ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile(color = "white") +  # Use white borders for clarity
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 3) +  # Display values with 2 decimal places
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,
name = "Bias") +
theme_minimal() +
labs(title = "Bias Heat Map by Season and Station",
x = "", y = "") +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5),  # Align labels horizontally
axis.text.y = element_text(angle = 0, hjust = 1)
)
# Plot the heatmap
ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile() +  # Use white borders for clarity
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 3) +  # Display values with 2 decimal places
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,
name = "Bias") +
theme_minimal() +
labs(title = "Bias Heat Map by Season and Station",
x = "", y = "") +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5),  # Align labels horizontally
axis.text.y = element_text(angle = 0, hjust = 1)
)
# Plot the heatmap
ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 3) +  # Display values with 2 decimal places
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,
name = "Bias") +
theme_minimal() +
labs(title = "Bias Heat Map by Season and Station",
x = "", y = "") +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5),  # Align labels horizontally
axis.text.y = element_text(angle = 0, hjust = 1)
)
# Plot the heatmap
ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 3) +  # Display values with 2 decimal places
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,
name = "Bias") +
theme_minimal() +
labs(title = "Bias Heat Map by Season and Station",
x = "", y = "") +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5),  # Align labels horizontally
axis.text.y = element_text(angle = 0, hjust = 1)
)
# Plot the heatmap
ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 3) +  # Display values with 2 decimal places
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,
name = "Bias") +
theme_minimal() +
labs(title = "Bias Heat Map by Season and Station",
x = "", y = "") +
scale_x_discrete(position = "top") +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5),  # Align labels horizontally
axis.text.y = element_text(angle = 0, hjust = 1)
)
# Transform data into a long format for ggplot
long_bias_results <- wide_bias_results %>%
pivot_longer(
cols = -station,  # Convert all columns except 'station'
names_to = "season",
values_to = "bias"
) %>%
mutate(season = factor(season, levels = c("DJF", "MAM", "JJA", "SON")))  # Reorder seasons
# Plot the heatmap
ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 3) +  # Display values with 2 decimal places
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,
name = "Bias") +
theme_minimal() +
labs(title = "Bias Heat Map by Season and Station",
x = "", y = "") +
scale_x_discrete(position = "top") +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5),  # Align labels horizontally
axis.text.y = element_text(angle = 0, hjust = 1)
)
# Plot the heatmap
ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 3) +  # Display values with 2 decimal places
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,
limits = c(min(long_bias_results$bias, na.rm = TRUE),
max(long_bias_results$bias, na.rm = TRUE)),
name = "Bias") +
theme_minimal() +
labs(title = "Bias Heat Map by Season and Station",
x = "", y = "") +
scale_x_discrete(position = "top") +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5),  # Align labels horizontally
axis.text.y = element_text(angle = 0, hjust = 1)
)
# Plot the heatmap
ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 3) +  # Display values with 2 decimal places
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,
limits = c(-5.2, 1),
name = "Bias") +
theme_minimal() +
labs(title = "Bias Heat Map by Season and Station",
x = "", y = "") +
scale_x_discrete(position = "top") +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5),  # Align labels horizontally
axis.text.y = element_text(angle = 0, hjust = 1)
)
# Plot the heatmap
ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 3) +  # Display values with 2 decimal places
scale_fill_gradient2(low = "darkblue", mid = "white", high = "tomato", midpoint = 0,
limits = c(-5.2, 1),
name = "Bias") +
theme_minimal() +
labs(title = "Bias Heat Map by Season and Station",
x = "", y = "") +
scale_x_discrete(position = "top") +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5),  # Align labels horizontally
axis.text.y = element_text(angle = 0, hjust = 1)
)
# Plot the heatmap
ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile(color = "white") +  # Use white borders for clarity
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 4) +  # Display values with 2 decimal places and larger font
scale_fill_gradient2(low = "darkblue", mid = "white", high = "tomato",
midpoint = 0, limits = c(-5.2, 1),  # Set fixed limits
name = "Bias") +
scale_x_discrete(position = "top") +  # Position season labels on top
theme_minimal() +
labs(title = "Bias Heat Map by Season and Station",
x = "Season", y = "Station") +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5, size = 14),  # Adjust font size for x-axis
axis.text.y = element_text(angle = 0, hjust = 1, size = 14),  # Adjust font size for y-axis
plot.title = element_text(size = 16, hjust = 0.5),  # Center and enlarge the title
legend.text = element_text(size = 12),  # Adjust legend font size
legend.title = element_text(size = 14) # Adjust legend title font size
)
# Plot the heatmap
ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile(color = "white") +  # Use white borders for clarity
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 4) +  # Display values with 2 decimal places and larger font
scale_fill_gradient2(low = "darkblue", mid = "white", high = "tomato",
midpoint = 0, limits = c(-5.2, 1),  # Set fixed limits
name = "Bias (ºC)") +
scale_x_discrete(position = "top") +  # Position season labels on top
theme_minimal() +
labs(title = "Temperature Bias by Season",
x = "", y = "") +
theme(
axis.text.x = element_text(angle = 0, hjust = 1, size = 12),  # Adjust font size for x-axis
axis.text.y = element_text(angle = 0, hjust = 1, size = 12),  # Adjust font size for y-axis
plot.title = element_text(size = 14, hjust = 0.5),  # Center and enlarge the title
legend.text = element_text(size = 10),  # Adjust legend font size
legend.title = element_text(size = 12) # Adjust legend title font size
)
# Transform data into a long format for ggplot
long_bias_results <- wide_bias_results %>%
pivot_longer(
cols = -station,  # Convert all columns except 'station'
names_to = "season",
values_to = "bias"
) %>%
mutate(
season = factor(season, levels = c("DJF", "MAM", "JJA", "SON")),  # Reorder seasons
station = factor(station, levels = c("Prat", "Carlini", "Juan Carlos I",
"O'Higgins", "Esperanza", "Vernadsky",
"Rothera", "San Martin"))  # Reorder stations
)
# Plot the heatmap
ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile(color = "white") +  # Use white borders for clarity
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 4) +  # Display values with 2 decimal places and larger font
scale_fill_gradient2(low = "darkblue", mid = "white", high = "tomato",
midpoint = 0, limits = c(-5.2, 1),  # Set fixed limits
name = "Bias (ºC)") +
scale_x_discrete(position = "top") +  # Position season labels on top
theme_minimal() +
labs(title = "Temperature Bias by Season",
x = "", y = "") +
theme(
axis.text.x = element_text(angle = 0, hjust = 1, size = 12),  # Adjust font size for x-axis
axis.text.y = element_text(angle = 0, hjust = 1, size = 12),  # Adjust font size for y-axis
plot.title = element_text(size = 14, hjust = 0.5),  # Center and enlarge the title
legend.text = element_text(size = 10),  # Adjust legend font size
legend.title = element_text(size = 12) # Adjust legend title font size
)
# Plot the heatmap
ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile(color = "white") +  # Use white borders for clarity
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 4) +  # Display values with 2 decimal places and larger font
scale_fill_gradient2(low = "darkblue", mid = "white", high = "tomato",
midpoint = 0, limits = c(-5.2, 1),  # Set fixed limits
name = "Bias (ºC)") +
scale_x_discrete(position = "top") +  # Position season labels on top
scale_y_discrete(limits = rev(levels(long_bias_results$station))) +  # Reverse the order of stations
theme_minimal() +
labs(title = "Temperature Bias by Season",
x = "", y = "") +
theme(
axis.text.x = element_text(angle = 0, hjust = 1, size = 12),  # Adjust font size for x-axis
axis.text.y = element_text(angle = 0, hjust = 1, size = 12),  # Adjust font size for y-axis
plot.title = element_text(size = 14, hjust = 0.5),  # Center and enlarge the title
legend.text = element_text(size = 10),  # Adjust legend font size
legend.title = element_text(size = 12) # Adjust legend title font size
)
ggsave("temp_bias_heatmap.png", plot, width = 6, height = 6, dpi = 300)
ggsave("temp_bias_heatmap.png", plot = plot, width = 6, height = 6, dpi = 300)
# Transform data into a long format for ggplot, reorder season levels, and station levels
long_bias_results <- wide_bias_results %>%
pivot_longer(
cols = -station,  # Convert all columns except 'station'
names_to = "season",
values_to = "bias"
) %>%
mutate(
season = factor(season, levels = c("DJF", "MAM", "JJA", "SON")),  # Reorder seasons
station = factor(station, levels = c("Prat", "Carlini", "Juan Carlos I",
"O'Higgins", "Esperanza", "Vernadsky",
"Rothera", "San Martin"))  # Reorder stations
)
# Create the heatmap plot
heatmap_plot <- ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile(color = "white") +  # Use white borders for clarity
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 4) +  # Display values with 2 decimal places
scale_fill_gradient2(low = "blue", mid = "white", high = "red",
midpoint = 0, limits = c(-5.2, 1),  # Set fixed limits
name = "Bias") +
scale_x_discrete(position = "top") +  # Position season labels on top
scale_y_discrete(limits = rev(levels(long_bias_results$station))) +  # Reverse the order of stations
theme_minimal() +
labs(title = "Bias Heat Map by Season and Station",
x = "Season", y = "Station") +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5, size = 14),  # Adjust font size for x-axis
axis.text.y = element_text(angle = 0, hjust = 1, size = 14),  # Adjust font size for y-axis
plot.title = element_text(size = 16, hjust = 0.5),  # Center and enlarge the title
legend.text = element_text(size = 12),  # Adjust legend font size
legend.title = element_text(size = 14)  # Adjust legend title font size
)
# Create the heatmap plot
heatmap_plot <- ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile(color = "white") +  # Use white borders for clarity
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 4) +  # Display values with 2 decimal places
scale_fill_gradient2(low = "blue", mid = "white", high = "red",
midpoint = 0, limits = c(-5.2, 1),  # Set fixed limits
name = "Bias") +
scale_x_discrete(position = "top") +  # Position season labels on top
scale_y_discrete(limits = rev(levels(long_bias_results$station))) +  # Reverse the order of stations
theme_minimal() +
labs(title = "Bias Heat Map by Season and Station",
x = "Season", y = "Station") +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5, size = 14),  # Adjust font size for x-axis
axis.text.y = element_text(angle = 0, hjust = 1, size = 14),  # Adjust font size for y-axis
plot.title = element_text(size = 16, hjust = 0.5),  # Center and enlarge the title
legend.text = element_text(size = 12),  # Adjust legend font size
legend.title = element_text(size = 14)  # Adjust legend title font size
)
heatmap_plot
# Create the heatmap plot
heatmap_plot <- ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile(color = "white") +  # Use white borders for clarity
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 4) +  # Display values with 2 decimal places
scale_fill_gradient2(low = "blue", mid = "white", high = "red",
midpoint = 0, limits = c(-5.2, 1),  # Set fixed limits
name = "Bias") +
scale_x_discrete(position = "top") +  # Position season labels on top
scale_y_discrete(limits = rev(levels(long_bias_results$station))) +  # Reverse the order of stations
theme_minimal() +
labs(title = "Bias Heat Map by Season and Station",
x = "Season", y = "Station") +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5, size = 12),  # Adjust font size for x-axis
axis.text.y = element_text(angle = 0, hjust = 1, size = 12),  # Adjust font size for y-axis
plot.title = element_text(size = 14, hjust = 0.5),  # Center and enlarge the title
legend.text = element_text(size = 10),  # Adjust legend font size
legend.title = element_text(size = 12)  # Adjust legend title font size
)
heatmap_plot
# Create the heatmap plot
heatmap_plot <- ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile(color = "white") +  # Use white borders for clarity
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 4) +  # Display values with 2 decimal places
scale_fill_gradient2(low = "blue", mid = "white", high = "red",
midpoint = 0, limits = c(-5.2, 1),  # Set fixed limits
name = "Bias (ºC)") +
scale_x_discrete(position = "top") +  # Position season labels on top
scale_y_discrete(limits = rev(levels(long_bias_results$station))) +  # Reverse the order of stations
theme_minimal() +
labs(title = "Temperature Bias by Season",
x = "", y = "") +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5, size = 12),  # Adjust font size for x-axis
axis.text.y = element_text(angle = 0, hjust = 1, size = 12),  # Adjust font size for y-axis
plot.title = element_text(size = 14, hjust = 0.5),  # Center and enlarge the title
legend.text = element_text(size = 10),  # Adjust legend font size
legend.title = element_text(size = 12)  # Adjust legend title font size
)
heatmap_plot
# Create the heatmap plot
heatmap_plot <- ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile(color = "white") +  # Use white borders for clarity
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 4) +  # Display values with 2 decimal places
scale_fill_gradient2(low = "blue", mid = "white", high = "red",
midpoint = 0, limits = c(-5.2, 1),  # Set fixed limits
name = "Bias (ºC)") +
scale_x_discrete(position = "top") +  # Position season labels on top
scale_y_discrete(limits = rev(levels(long_bias_results$station))) +  # Reverse the order of stations
theme_minimal() +
labs(title = "Temperature Bias by Season",
x = "", y = "") +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5, size = 12),  # Adjust font size for x-axis
axis.text.y = element_text(angle = 0, hjust = 1, size = 12),  # Adjust font size for y-axis
plot.title = element_text(size = 14, hjust = 0.5),  # Center and enlarge the title
legend.text = element_text(size = 10),  # Adjust legend font size
legend.title = element_text(size = 10)  # Adjust legend title font size
)
heatmap_plot
# Save the heatmap plot as a PNG file
ggsave("bias_heatmap.png", plot = heatmap_plot, width = 6, height = 6, dpi = 300)
ggsave("bias_heatmap.png", plot = heatmap_plot, width = 5, height = 4, dpi = 300)
# Create the heatmap plot
heatmap_plot <- ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile(color = "") +  # Use white borders for clarity
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 4) +  # Display values with 2 decimal places
scale_fill_gradient2(low = "darkblue", mid = "white", high = "tomato",
midpoint = 0, limits = c(-5.2, 1),  # Set fixed limits
name = "Bias (ºC)") +
scale_x_discrete(position = "top") +  # Position season labels on top
scale_y_discrete(limits = rev(levels(long_bias_results$station))) +  # Reverse the order of stations
theme_minimal() +
labs(title = "Temperature Bias by Season",
x = "", y = "") +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5, size = 12),  # Adjust font size for x-axis
axis.text.y = element_text(angle = 0, hjust = 1, size = 12),  # Adjust font size for y-axis
plot.title = element_text(size = 14, hjust = 0.5),  # Center and enlarge the title
legend.text = element_text(size = 10),  # Adjust legend font size
legend.title = element_text(size = 10)  # Adjust legend title font size
)
ggsave("bias_heatmap.png", plot = heatmap_plot, width = 5, height = 4, dpi = 300)
# Create the heatmap plot
heatmap_plot <- ggplot(long_bias_results, aes(x = season, y = station, fill = bias)) +
geom_tile() +  # Use white borders for clarity
geom_text(aes(label = sprintf("%.2f", bias)), color = "black", size = 4) +  # Display values with 2 decimal places
scale_fill_gradient2(low = "darkblue", mid = "white", high = "tomato",
midpoint = 0, limits = c(-5.2, 1),  # Set fixed limits
name = "Bias (ºC)") +
scale_x_discrete(position = "top") +  # Position season labels on top
scale_y_discrete(limits = rev(levels(long_bias_results$station))) +  # Reverse the order of stations
theme_minimal() +
labs(title = "Temperature Bias by Season",
x = "", y = "") +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5, size = 12),  # Adjust font size for x-axis
axis.text.y = element_text(angle = 0, hjust = 1, size = 12),  # Adjust font size for y-axis
plot.title = element_text(size = 14, hjust = 0.5),  # Center and enlarge the title
legend.text = element_text(size = 10),  # Adjust legend font size
legend.title = element_text(size = 10)  # Adjust legend title font size
)
ggsave("bias_heatmap.png", plot = heatmap_plot, width = 5, height = 4, dpi = 300)
